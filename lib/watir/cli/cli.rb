require 'optparse'
require 'fileutils'

module Watir
  module Cli
    class Cli
      attr_accessor :suite, :suite_name

      #
      # if the user passes something invalid in, then we will append `-h` and display because they need help
      #
      def initialize
        option_parser.parse!
      rescue
        ARGV << '-h'
        option_parser.parse!
      end

      #
      # parses the options that are passed in
      # currently only --suite and -h/--help are implemented
      #
      def option_parser
        uh_oh_message = "Select a suite type of either rspec or cucumber and the name you would like.\n\tLike 'watir --suite rspec_this_guy'"
        OptionParser.new do |opts|
          if opts.default_argv == []
            # all this does is force the `-h` option rescued in the initialize
            fail
          end

          opts.on('--suite [SUITE]', '-s [SUITE]', uh_oh_message) do |v|
            unless v =~ /(cucumber|rspec)/
              puts uh_oh_message
              exit
            end

            @suite = Regexp.last_match(1)
            @suite_name = v.gsub(/(?:cucumber|rspec)_?/, '')
            if suite_name.empty?
              @suite_name = "#{ suite }_watir_suite"
            end

            create_base_suite
          end

          opts.on_tail("-h", "--help", "Show this message") do
            puts 'Usage: watir [options]'
            puts "\t-h, --help  Only shows this message"
            puts "\t--suite     #{ uh_oh_message.gsub("\n\t", ' ') }"
            exit
          end
        end
      end

      #
      # makes the base directory and runs `rspec --init` or `cucumber --init` in it
      # then calls for the appropriate modifications
      #
      def create_base_suite
        FileUtils.mkdir_p(suite_name)
        FileUtils.cd(suite_name) { `#{ suite } --init` }

        if suite == 'rspec'
          modify_rspec
        elsif suite == 'cucumber'
          modify_cucumber
        else
          puts 'WTF? How did you do that?'
        end
      end

      #
      # makes a pages directory for whatever style of page objects you would like
      # modifies the generated spec_helper to require watir and add in hooks for @browser
      #
      def modify_rspec
        FileUtils.mkdir_p("#{ suite_name }/spec/pages")
        file = File.new("./#{ suite_name }/spec/spec_helper.rb")
        file_text = file.readlines.join
        file.close

        inner_text = suite_name == 'rspec_watir_suite' ? '' : "_#{ suite_name }"

        watir_text = %Q{
# This require is generated by the `watir --suite rspec#{ inner_text }` command
require 'watir'
RSpec.configure do |config|

  # These hooks are generated by the `watir --suite rspec#{ inner_text }` command
  # Open up the browser for each example.
  config.before :all do
    @browser = Watir::Browser.new
  end
  # Close that browser after each example.
  config.after :all do
    @browser.close if @browser
  end
}

        open("./#{ suite_name }/spec/spec_helper.rb", 'w+') do |file|
          file.write file_text.gsub('RSpec.configure do |config|', watir_text)
        end
      end

      #
      # makes a pages directory for whatever style of page objects you would like
      # modifies the generated env.rb to require watir
      # generates hooks for @browser
      #
      def modify_cucumber
        FileUtils.mkdir_p("#{ suite_name }/features/pages")
        open("./#{ suite_name }/features/support/env.rb", 'w+') do |file|
          file.write %Q{require 'watir'}
        end
        open("./#{ suite_name }/features/support/hooks.rb", 'w+') do |file|
          file.write %Q{Before do
  @browser = Watir::Browser.new
end

After do
  @browser.close
end
}
        end
      end

    end
  end
end